{"version":3,"sources":["webpack:///webpack/bootstrap e750159a1d12230804b2","webpack:///./server/app.js","webpack:///external \"express\"","webpack:///external \"path\"","webpack:///external \"serve-favicon\"","webpack:///external \"morgan\"","webpack:///external \"cookie-parser\"","webpack:///external \"body-parser\"","webpack:///./server/routes/api.js","webpack:///./local_modules/trie-node/index.js","webpack:///external \"fs\"","webpack:///./server/routes/index.js"],"names":["app","set","join","__dirname","use","urlencoded","extended","json","static","port","PORT","listen","console","log","router","Router","dic","load","get","req","res","next","status","words","getSuggestions","query","numbers","e","keys","TrieNode","children","word","useFrequency","nodeToAddWord","traverseAddingNodes","insertWordIntoListByFrequency","node","i","len","length","thisLetter","thisKey","hasOwnProperty","list","wordToInsert","wordsLength","push","comparedFrequency","insertFrequency","splice","keyString","suggestionDepth","result","concat","map","wordTuple","getDeeperSuggestions","root","maxDepth","deepSuggestions","traverse","level","sort","a","b","reduce","depth","d","childKey","path","readFile","err","data","lines","toString","split","forEach","Number","insert","render","title"],"mappings":"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","file":"backend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./server\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap e750159a1d12230804b2\n **/","import express from 'express'\nimport path from 'path'\nimport favicon from 'serve-favicon'\nimport logger from 'morgan'\nimport cookieParser from 'cookie-parser'\nimport bodyParser from'body-parser'\n\nvar app = express()\n\n// APP SETUP\n// =============================================================================\n\napp.set('views', path.join(__dirname, 'views'))\napp.set('view engine', 'pug')\n\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'))\napp.use(bodyParser.urlencoded({ extended: true }))\napp.use(bodyParser.json())\napp.use(cookieParser())\napp.use(express.static(path.join(__dirname, 'public')))\n\nimport api from './routes/api'\nimport index from './routes/index'\n\napp.use('/', index)\napp.use('/api', api)\n\n// START THE SERVER\n// =============================================================================\n\nvar port = process.env.PORT || 8080        // set our port\napp.listen(port)\nconsole.log('Listening on port ' + port)\n\n\n\n/** WEBPACK FOOTER **\n ** ./server/app.js\n **/","module.exports = require(\"express\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"express\"\n ** module id = 1\n ** module chunks = 0\n **/","module.exports = require(\"path\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"path\"\n ** module id = 2\n ** module chunks = 0\n **/","module.exports = require(\"serve-favicon\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"serve-favicon\"\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = require(\"morgan\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"morgan\"\n ** module id = 4\n ** module chunks = 0\n **/","module.exports = require(\"cookie-parser\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"cookie-parser\"\n ** module id = 5\n ** module chunks = 0\n **/","module.exports = require(\"body-parser\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"body-parser\"\n ** module id = 6\n ** module chunks = 0\n **/","import express from 'express'\nlet router = express.Router()\nimport TrieNode from 'local/trie-node'\n\n// load dictionary\nlet dic = TrieNode.load('server/data/dictionary.txt')\n\nrouter.get('/', function(req, res, next) {\n  res.json({status: 'OK'})\n})\n\nrouter.get('/words', function(req, res, next) {\n  let words = []\n  try {\n    words = dic.getSuggestions(req.query.numbers, 5)\n  } catch (e) { }\n\n  res.json({\n    words\n  })\n})\n\nexport default router\n\n\n\n/** WEBPACK FOOTER **\n ** ./server/routes/api.js\n **/","import path from 'path'\nimport fs from 'fs'\n\nconst keys = {\n  'a': 2, 'b': 2, 'c': 2,\n  'd': 3, 'e': 3, 'f': 3,\n  'g': 4, 'h': 4, 'i': 4,\n  'j': 5, 'k': 5, 'l': 5,\n  'm': 6, 'n': 6, 'o': 6,\n  'p': 7, 'q': 7, 'r': 7, 's': 7,\n  't': 8, 'u': 8, 'v': 8,\n  'w': 9, 'x': 9, 'y': 9, 'z': 9\n}\n\nclass TrieNode {\n  constructor() {\n    this.children = {}\n    this.words = []\n  }\n\n  insert(word, useFrequency) {\n    // Traverse the tree to the node where the word should be inserted. If any\n    // needed nodes do not exist along the way, they are created.\n    // console.log('insrt', word, useFrequency)\n    var nodeToAddWord = traverseAddingNodes(this)\n\n    // Insert the word into the wordlist of the node returned above. Use the\n    // data provided (frequency of use in English text) to place the word in the\n    // correct position, so that we can recommend more common words first.\n    insertWordIntoListByFrequency(nodeToAddWord.words, word, useFrequency)\n\n    function traverseAddingNodes(node) {\n      var i = 0, len = word.length\n      // Traverse the tree's existing nodes as far as possible.\n      for(i, len; i < len; i++) {\n        var thisLetter = word[i]\n        var thisKey = keys[thisLetter]\n\n        if(node.children.hasOwnProperty(thisKey)) {\n          node = node.children[thisKey]\n        } else { break; }\n      }\n\n      // If we reach this point and we still aren't at the node we want, it means\n      // that other words matching this key pattern haven't been inserted before.\n      // Continue, this time adding the required nodes as we go.\n      for(i, len; i < len; i++) {\n        thisLetter = word[i]\n        thisKey = keys[thisLetter]\n        node.children[thisKey] = new TrieNode()\n        node = node.children[thisKey]\n      }\n\n      return node\n    }\n\n    function insertWordIntoListByFrequency(list, word, useFrequency) {\n      var wordToInsert = [word, useFrequency]; // Store word in a tuple.\n      var wordsLength = list.length\n\n      if(wordsLength === 0) {\n        // Handle the case where this node has no words yet\n        list.push(wordToInsert)\n      } else {\n        // Find where to insert this word among others, based on its\n        // frequency property.\n       // todo: this could be faster with binary search.\n        for(var i = 0; i < wordsLength; i++) {\n          var comparedFrequency = list[i][1]\n          var insertFrequency = wordToInsert[1]\n\n          if(insertFrequency >= comparedFrequency) {\n            // If i see a word with lower useFrequency than mine, insert before it.\n            list.splice(i, 0, wordToInsert)\n            return\n          }\n        }\n        // if we've reached here, we've looked at the last word on this node and\n        // our word's frequency is less than it.\n        // Put my word at the end of the list.\n        list.splice(i + 1, 0, wordToInsert)\n      }\n    }\n  }\n\n  getSuggestions(keyString, suggestionDepth) {\n    // Traverse the tree based on the key digits in keyString, to find the node\n    // where relevant words are stored.\n    var result = []\n    var node = this\n\n    for(var i = 0; i < keyString.length; i++) {\n      var thisKey = keyString[i]\n        // if(!node.children.hasOwnProperty(thisKey)) { break; }\n        node = node.children[thisKey]\n    }\n\n    // Add all the words to the result.\n    result = result.concat(node.words.map(function(wordTuple) {\n      return wordTuple[0]\n    }))\n\n    // If suggestionDeth is > 0, the caller is asking for recommendations of\n    // words longer than the number of keys pressed.\n    return suggestionDepth > 0 ?\n      result.concat(getDeeperSuggestions(node, suggestionDepth)) :\n      result\n\n    function getDeeperSuggestions(root, maxDepth) {\n      // We traverse down every possible branch from the result node (the node\n      // corresponding to the keypad entry), saving words we see as we go and\n      // stopping when we reach the specified depth.\n\n      // deepSuggestions is an array with (maxDepth) subarrays.\n      // Each of the subarrays will be one depth level's suggestions.\n      var deepSuggestions = []\n      while(deepSuggestions.length < maxDepth) {\n        deepSuggestions.push([])\n      }\n\n      // The traverse function (below) fills deepSuggestions with results.\n      traverse(root, 0)\n      // Each level is sorted individually, because we want shallower results to\n      // always be suggested first. (this is an implementation detail and\n      // there's a possibility sorting everything together might give\n      // better results in practice.)\n      deepSuggestions = deepSuggestions.map(function(level) {\n        return level.sort(function(a, b) {\n          return b[1] - a[1]\n        })\n      })\n\n      // At this point, deepSuggestions is an array of arrays (one for each level\n      // of depth). Each of those subarrays contains word tuples.\n      return deepSuggestions.reduce(function(result, level) {\n        // Merge each level into a single flat array.\n        return result.concat(level.map(function(wordTuple) {\n          // Keep only the word itself, discarding the frequency number\n          return wordTuple[0]\n        }))\n      }, [])\n\n      function traverse(root, depth) {\n        // Basic tree traversal, collecting results up to the required depth.\n        if(depth <= maxDepth && depth !== 0) { // Result already contains depth 0\n          var d = depth - 1\n          deepSuggestions[d] = deepSuggestions[d].concat(root.words)\n        }\n\n        if(depth === maxDepth) { return; }\n\n        for(var childKey in root.children) {\n          traverse(root.children[childKey], depth + 1)\n        }\n      }\n    }\n  }\n}\nTrieNode.load = function(path) {\n  let dic = new TrieNode()\n\n  fs.readFile(path, function(err, data) {\n    if(err) throw err;\n\n    var lines = data.toString().split(\"\\n\");\n    lines.forEach(word => {\n      word = word.split('\\t')\n      if (word[1] !== '' && Number(word[0]) > 0) {\n        dic.insert(word[1], Number(word[0]))\n      }\n    })\n  })\n\n  return dic\n}\nexport default TrieNode\n\n\n\n/** WEBPACK FOOTER **\n ** ./local_modules/trie-node/index.js\n **/","module.exports = require(\"fs\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"fs\"\n ** module id = 9\n ** module chunks = 0\n **/","import express from 'express'\nlet router = express.Router()\n\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\n  res.render('index', { title: 'Express' })\n})\n\nexport default router\n\n\n\n/** WEBPACK FOOTER **\n ** ./server/routes/index.js\n **/"],"sourceRoot":""}